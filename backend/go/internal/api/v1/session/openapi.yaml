openapi: 3.1.0
info:
  title: Real-time Video Conferencing API
  description: |-
    This API provides WebSocket endpoints for real-time video conferencing with advanced features including:
    
    - **Video Calls**: Multi-participant video conferencing with role-based permissions
    - **Screen Sharing**: Real-time screen sharing with host approval system
    - **Text Chat**: Persistent chat with message history and moderation
    - **Waiting Room**: Host-controlled admission system for meeting security
    - **Permission System**: Hierarchical roles (Waiting → Participant → Screenshare → Host)
    
    ## Authentication
    
    **All endpoints require JWT authentication.** A valid JWT token must be provided as a `token` query parameter.
    The token should contain user identity information and will be validated against Auth0 or compatible providers.
    
    ## Message Protocol
    
    All WebSocket communication follows a standardized message format:
    ```json
    {
      "event": "event_type",
      "payload": {
        // Event-specific data
      }
    }
    ```
    
    ## Role-Based Permissions
    
    - **Waiting**: Users awaiting host approval (limited permissions)
    - **Participant**: Active meeting participants (chat, video, hand raising)
    - **Screenshare**: Participants currently sharing screen (enhanced privileges)
    - **Host**: Room administrators (full control, user management)
  version: "1.0.0"
servers:
  - url: "ws://localhost:8080"
    description: Local development server
  - url: "wss://api.yourdomain.com"
    description: Production server

tags:
  - name: WebSocket Connections
    description: Endpoints for establishing real-time WebSocket connections
  - name: Video Conferencing
    description: Video call and room management functionality
  - name: Chat System
    description: Real-time messaging and chat history
  - name: Screen Sharing
    description: Screen sharing and presentation features

paths:
  /ws/zoom/{roomId}:
    get:
      tags:
        - WebSocket Connections
        - Video Conferencing
      summary: Join video conference room
      description: |-
        Establishes a WebSocket connection for video conferencing functionality.
        
        **Features Available:**
        - Multi-participant video calls
        - Real-time audio/video streaming coordination
        - Participant management and role assignment
        - Waiting room functionality with host approval
        - Hand raising and speaking queue management
        
        **First User Privilege:**
        The first user to join an empty room automatically becomes the host.
        Subsequent users enter the waiting room and require host approval.
        
        **Supported Events:** All video conferencing events including participant management,
        hand raising, waiting room control, and basic chat functionality.
      parameters:
        - name: roomId
          in: path
          description: Unique identifier for the video conference room
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 100
            example: "meeting-12345"
        - name: token
          in: query
          description: JWT authentication token
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      security:
        - bearerAuth: []
      responses:
        '101':
          description: |-
            Successfully upgraded to WebSocket connection.
            Client can now send/receive real-time messages.
          headers:
            Upgrade:
              description: Protocol upgrade confirmation
              schema:
                type: string
                example: "websocket"
            Connection:
              description: Connection upgrade confirmation
              schema:
                type: string
                example: "Upgrade"
        '400':
          description: Bad Request - Invalid room ID format or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |-
            Unauthorized - Authentication failed
            - Missing token parameter
            - Invalid or expired JWT token
            - Token signature verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |-
            Forbidden - CORS policy violation
            - Request origin not in allowed origins list
            - Invalid authentication claims
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ws/screenshare/{roomId}:
    get:
      tags:
        - WebSocket Connections
        - Screen Sharing
      summary: Join screen sharing session
      description: |-
        Establishes a WebSocket connection for screen sharing functionality.
        
        **Features Available:**
        - Screen sharing coordination and permissions
        - Host-controlled screen sharing approval
        - Multiple screen sharing sessions support
        - Screen sharing state management
        
        **Permission Requirements:**
        Screen sharing typically requires host approval. Participants can request
        screen sharing permissions, which hosts can approve or deny.
        
        **Supported Events:** Screen sharing events, participant management,
        and basic communication features.
      parameters:
        - name: roomId
          in: path
          description: Unique identifier for the screen sharing session
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 100
            example: "screenshare-abc123"
        - name: token
          in: query
          description: JWT authentication token
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Successfully upgraded to WebSocket for screen sharing
        '400':
          description: Bad Request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Access denied or CORS violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ws/chat/{roomId}:
    get:
      tags:
        - WebSocket Connections
        - Chat System
      summary: Join chat room
      description: |-
        Establishes a WebSocket connection for real-time text chat functionality.
        
        **Features Available:**
        - Real-time text messaging
        - Chat history retrieval (last 50 messages by default)
        - Message validation and moderation
        - Persistent chat storage with configurable limits
        - Message deletion for hosts and message authors
        
        **Chat Features:**
        - Maximum message length: 1000 characters
        - Input validation and sanitization
        - Automatic chat history management
        - Real-time message broadcasting to participants
        
        **Supported Events:** All chat-related events including sending messages,
        retrieving history, and message moderation.
      parameters:
        - name: roomId
          in: path
          description: Unique identifier for the chat room
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 100
            example: "chat-general"
        - name: token
          in: query
          description: JWT authentication token
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Successfully upgraded to WebSocket for chat
        '400':
          description: Bad Request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Access denied or CORS violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      in: query
      name: token
      description: |-
        JWT token obtained from authentication provider (Auth0).
        
        **Token Requirements:**
        - Must be a valid JWT with proper signature
        - Should contain user identity claims (subject, display name)
        - Token expiration is enforced
        
        **Example Usage:**
        ```
        ws://localhost:8080/ws/chat/room123?token=eyJhbGciOiJIUzI1NiIs...
        ```

  schemas:
    # Core Message Structure
    WebSocketMessage:
      type: object
      required:
        - event
        - payload
      properties:
        event:
          $ref: '#/components/schemas/EventType'
        payload:
          oneOf:
            - $ref: '#/components/schemas/ChatPayload'
            - $ref: '#/components/schemas/ParticipantPayload'
            - $ref: '#/components/schemas/RoomStatePayload'
            - $ref: '#/components/schemas/ScreenSharePayload'
      description: |-
        Standard message format for all WebSocket communication.
        Every message sent or received follows this structure.
      example:
        event: "add_chat"
        payload:
          clientId: "user123"
          displayName: "John Doe"
          chatId: "msg456"
          timestamp: 1672531200
          chatContent: "Hello everyone!"

    # Event Types
    EventType:
      type: string
      enum:
        # Chat Events
        - "add_chat"
        - "delete_chat"
        - "get_recent_chats"
        # Hand Raising Events
        - "raise_hand"
        - "lower_hand"
        # Waiting Room Events
        - "request_waiting"
        - "accept_waiting"
        - "deny_waiting"
        # Connection Events
        - "connect"
        - "disconnect"
        # Screen Sharing Events
        - "request_screenshare"
        - "accept_screenshare"
        - "deny_screenshare"
      description: |-
        All possible event types that can be sent or received via WebSocket.
        Events determine how the payload should be interpreted and which
        handler processes the message.

    # Role Types
    RoleType:
      type: string
      enum:
        - "waiting"
        - "participant"
        - "screenshare"
        - "host"
      description: |-
        User roles within a room, defining permission levels:
        - **waiting**: Users awaiting admission (limited permissions)
        - **participant**: Active participants (chat, video, hand raising)
        - **screenshare**: Currently sharing screen (enhanced privileges)
        - **host**: Room administrators (full control)

    # Basic Client Information
    ClientInfo:
      type: object
      required:
        - clientId
        - displayName
      properties:
        clientId:
          type: string
          description: Unique identifier for the client (from JWT token)
          example: "user_abc123"
        displayName:
          type: string
          description: Human-readable name for UI display
          minLength: 1
          maxLength: 100
          example: "John Doe"
      description: Basic identifying information included in most payloads

    # Chat-Related Schemas
    ChatPayload:
      allOf:
        - $ref: '#/components/schemas/ClientInfo'
        - type: object
          required:
            - chatId
            - timestamp
            - chatContent
          properties:
            chatId:
              type: string
              description: Unique identifier for this chat message
              example: "msg_xyz789"
            timestamp:
              type: integer
              format: int64
              description: Unix timestamp when message was created
              example: 1672531200
            chatContent:
              type: string
              description: The actual message content
              minLength: 1
              maxLength: 1000
              example: "Hello everyone! How is the meeting going?"
      description: |-
        Chat message payload used for sending, deleting, and retrieving messages.
        Includes validation for content length and required fields.

    # Participant Management
    ParticipantPayload:
      allOf:
        - $ref: '#/components/schemas/ClientInfo'
      description: |-
        Basic participant information used for hand raising, waiting room
        management, and general participant events.

    # Room State Information
    RoomStatePayload:
      allOf:
        - $ref: '#/components/schemas/ClientInfo'
        - type: object
          required:
            - roomId
            - hosts
            - participants
            - handsRaised
            - waitingUsers
          properties:
            roomId:
              type: string
              description: Unique identifier for the room
              example: "room_meeting123"
            hosts:
              type: array
              items:
                $ref: '#/components/schemas/ClientInfo'
              description: List of clients with host privileges
            participants:
              type: array
              items:
                $ref: '#/components/schemas/ClientInfo'
              description: List of active meeting participants
            handsRaised:
              type: array
              items:
                $ref: '#/components/schemas/ClientInfo'
              description: List of participants currently raising hands
            waitingUsers:
              type: array
              items:
                $ref: '#/components/schemas/ClientInfo'
              description: List of users waiting for admission
            sharingScreen:
              type: array
              items:
                $ref: '#/components/schemas/ClientInfo'
              description: List of users currently sharing screen
              nullable: true
      description: |-
        Complete room state information sent to clients when they join
        or when significant state changes occur.

    # Screen Sharing
    ScreenSharePayload:
      allOf:
        - $ref: '#/components/schemas/ClientInfo'
      description: |-
        Screen sharing related payload for requesting, accepting, or
        denying screen sharing permissions.

    # Error Responses
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Human-readable error message
          example: "Invalid authentication token"
        code:
          type: string
          description: Machine-readable error code
          example: "INVALID_TOKEN"
        details:
          type: object
          description: Additional error context
          additionalProperties: true
      description: Standard error response format

    # Chat History Response
    ChatHistoryResponse:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatPayload'
          description: Array of recent chat messages
          maxItems: 50
        total:
          type: integer
          description: Total number of messages in room history
          example: 127
        hasMore:
          type: boolean
          description: Whether there are more messages available
          example: true
      description: |-
        Response containing recent chat messages, typically sent when
        a client requests chat history via get_recent_chats event.

  # WebSocket Message Examples
  examples:
    # Chat Examples
    SendChatMessage:
      summary: Send a chat message
      value:
        event: "add_chat"
        payload:
          clientId: "user_12345"
          displayName: "Alice Smith"
          chatId: "msg_67890"
          timestamp: 1672531200
          chatContent: "Welcome to the meeting!"

    DeleteChatMessage:
      summary: Delete a chat message
      value:
        event: "delete_chat"
        payload:
          clientId: "user_12345"
          displayName: "Alice Smith"
          chatId: "msg_67890"
          timestamp: 1672531200
          chatContent: ""

    RequestChatHistory:
      summary: Request recent chat messages
      value:
        event: "get_recent_chats"
        payload:
          clientId: "user_12345"
          displayName: "Alice Smith"

    # Participant Management Examples
    RaiseHand:
      summary: Raise hand to request speaking
      value:
        event: "raise_hand"
        payload:
          clientId: "user_12345"
          displayName: "Bob Johnson"

    LowerHand:
      summary: Lower raised hand
      value:
        event: "lower_hand"
        payload:
          clientId: "user_12345"
          displayName: "Bob Johnson"

    # Waiting Room Examples
    RequestJoinRoom:
      summary: Request to join the room from waiting area
      value:
        event: "request_waiting"
        payload:
          clientId: "user_67890"
          displayName: "Charlie Brown"

    AcceptWaitingUser:
      summary: Host accepts a waiting user (Host Only)
      value:
        event: "accept_waiting"
        payload:
          clientId: "user_67890"
          displayName: "Charlie Brown"

    DenyWaitingUser:
      summary: Host denies a waiting user (Host Only)
      value:
        event: "deny_waiting"
        payload:
          clientId: "user_67890"
          displayName: "Charlie Brown"

    # Screen Sharing Examples
    RequestScreenShare:
      summary: Request permission to share screen
      value:
        event: "request_screenshare"
        payload:
          clientId: "user_12345"
          displayName: "Diana Wilson"

    AcceptScreenShare:
      summary: Host approves screen sharing (Host Only)
      value:
        event: "accept_screenshare"
        payload:
          clientId: "user_12345"
          displayName: "Diana Wilson"

    DenyScreenShare:
      summary: Host denies screen sharing (Host Only)
      value:
        event: "deny_screenshare"
        payload:
          clientId: "user_12345"
          displayName: "Diana Wilson"

    # Room State Example
    RoomStateUpdate:
      summary: Complete room state (sent automatically)
      value:
        event: "room_state"
        payload:
          clientId: "user_12345"
          displayName: "Current User"
          roomId: "meeting_abc123"
          hosts:
            - clientId: "user_11111"
              displayName: "Host User"
          participants:
            - clientId: "user_12345"
              displayName: "Participant One"
            - clientId: "user_12346"
              displayName: "Participant Two"
          handsRaised:
            - clientId: "user_12346"
              displayName: "Participant Two"
          waitingUsers:
            - clientId: "user_67890"
              displayName: "Waiting User"
          sharingScreen: []

# Additional Documentation Sections
x-logo:
  url: "https://your-domain.com/logo.png"
  altText: "Video Conferencing API"

x-contact:
  name: "API Support"
  url: "https://your-domain.com/support"
  email: "api-support@your-domain.com"

x-license:
  name: "MIT"
  url: "https://opensource.org/licenses/MIT"

# Extended Documentation
x-tagGroups:
  - name: "Getting Started"
    tags:
      - WebSocket Connections
  - name: "Features"
    tags:
      - Video Conferencing
      - Chat System
      - Screen Sharing

# API Usage Information
x-documentation:
  description: |-
    ## Quick Start Guide
    
    ### 1. Authentication
    Obtain a JWT token from your authentication provider (Auth0 recommended).
    
    ### 2. Establish Connection
    Connect to the appropriate WebSocket endpoint with your token:
    ```javascript
    const token = "your-jwt-token";
    const roomId = "your-room-id";
    const ws = new WebSocket(`ws://localhost:8080/ws/chat/${roomId}?token=${token}`);
    ```
    
    ### 3. Send Messages
    All messages follow the standard format:
    ```javascript
    ws.send(JSON.stringify({
      event: "add_chat",
      payload: {
        clientId: "user123",
        displayName: "Your Name",
        chatId: "unique-message-id",
        timestamp: Date.now(),
        chatContent: "Hello world!"
      }
    }));
    ```
    
    ### 4. Handle Responses
    Listen for incoming messages and route based on event type:
    ```javascript
    ws.onmessage = (event) => {
      const message = JSON.parse(event.data);
      switch (message.event) {
        case "add_chat":
          // Handle new chat message
          break;
        case "room_state":
          // Handle room state update
          break;
        // ... other events
      }
    };
    ```
    
    ## Permission System
    
    The API implements a hierarchical permission system:
    
    | Role | Permissions |
    |------|-------------|
    | **Waiting** | Request to join room |
    | **Participant** | Chat, raise hand, request screen share |
    | **Screenshare** | All participant permissions + active screen sharing |
    | **Host** | All permissions + user management + room control |
    
    ## Rate Limiting
    
    - **Connection Rate**: Maximum 10 connections per minute per IP
    - **Message Rate**: Maximum 50 messages per minute per client
    - **Chat Rate**: Maximum 30 chat messages per minute per client
    
    ## Error Handling
    
    The API uses standard HTTP status codes for connection errors and
    structured error messages for application-level errors:
    
    ```json
    {
      "error": "Human readable error message",
      "code": "MACHINE_READABLE_CODE",
      "details": {
        "additionalContext": "value"
      }
    }
    ```
    
    ## Best Practices
    
    1. **Implement Reconnection Logic**: Handle network interruptions gracefully
    2. **Validate Messages**: Always validate incoming message structure
    3. **Handle Permissions**: Check user roles before enabling UI features
    4. **Buffer Management**: Implement proper message queuing for reliability
    5. **Error Recovery**: Gracefully handle and recover from errors